{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["getConnection","nav","navigator","connection","mozConnection","webkitConnection","getConnectionProperty","c","rtt","type","saveData","downlink","downlinkMax","effectiveType","App","online","useState","since","undefined","onLine","state","setState","useEffect","onOnline","prevState","Date","onOffline","onConnectionChange","window","addEventListener","removeEventListener","useNetwork","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAgBA,SAASA,IACP,IAAMC,EAAMC,UACZ,MAAmB,kBAARD,EAAyB,KAC7BA,EAAIE,YAAcF,EAAIG,eAAiBH,EAAII,iBAGpD,SAASC,IACP,IAAMC,EAAIP,IACV,OAAKO,EACE,CACLC,IAAKD,EAAEC,IACPC,KAAMF,EAAEE,KACRC,SAAUH,EAAEG,SACZC,SAAUJ,EAAEI,SACZC,YAAaL,EAAEK,YACfC,cAAeN,EAAEM,eAPJ,GAgFFC,MApBf,WAAgB,IACNC,EAlDV,WAAqC,IAAD,EACRC,oBAAS,WACjC,OAAO,aACLC,WAAOC,EACPH,OAAQb,UAAUiB,QACfb,QAL2B,mBAC3Bc,EAD2B,KACpBC,EADoB,KA8ClC,OArCAC,qBAAU,WACR,IAAMC,EAAW,WACfF,GAAS,SAACG,GAAD,mBAAC,eACLA,GADI,IAEPT,QAAQ,EACRE,MAAO,IAAIQ,WAITC,EAAY,WAChBL,GAAS,SAACG,GAAD,mBAAC,eACLA,GADI,IAEPT,QAAQ,EACRE,MAAO,IAAIQ,WAITE,EAAqB,WACzBN,GAAS,SAACG,GAAD,mBAAC,eACLA,GACAlB,SAIPsB,OAAOC,iBAAiB,SAAUN,GAClCK,OAAOC,iBAAiB,UAAWH,GAEnC,IAAMvB,EAAaH,IAGnB,OAFU,OAAVG,QAAU,IAAVA,KAAY0B,iBAAiB,SAAUF,GAEhC,WACLC,OAAOE,oBAAoB,SAAUP,GACrCK,OAAOE,oBAAoB,UAAWJ,GAC5B,OAAVvB,QAAU,IAAVA,KAAY2B,oBAAoB,SAAUH,MAE3C,IAEIP,EAIYW,GAAXhB,OAER,OACE,qBAAKiB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACGjB,EACC,iDACiB,cAAC,IAAD,OAGjB,kDACkB,cAAC,IAAD,YClFbkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f4d2245a.chunk.js","sourcesContent":["import \"./App.css\";\n\nimport { useEffect, useState } from \"react\";\nimport { HiStatusOnline, HiStatusOffline } from \"react-icons/hi\";\n\nexport interface NetworkState {\n  since?: Date;\n  online?: boolean;\n  rtt?: number;\n  type?: string;\n  downlink?: number;\n  saveData?: boolean;\n  downlinkMax?: number;\n  effectiveType?: string;\n}\n\nfunction getConnection() {\n  const nav = navigator as any;\n  if (typeof nav !== \"object\") return null;\n  return nav.connection || nav.mozConnection || nav.webkitConnection;\n}\n\nfunction getConnectionProperty(): NetworkState {\n  const c = getConnection();\n  if (!c) return {};\n  return {\n    rtt: c.rtt,\n    type: c.type,\n    saveData: c.saveData,\n    downlink: c.downlink,\n    downlinkMax: c.downlinkMax,\n    effectiveType: c.effectiveType,\n  };\n}\n\nfunction useNetwork(): NetworkState {\n  const [state, setState] = useState(() => {\n    return {\n      since: undefined,\n      online: navigator.onLine,\n      ...getConnectionProperty(),\n    };\n  });\n\n  useEffect(() => {\n    const onOnline = () => {\n      setState((prevState) => ({\n        ...prevState,\n        online: true,\n        since: new Date(),\n      }));\n    };\n\n    const onOffline = () => {\n      setState((prevState) => ({\n        ...prevState,\n        online: false,\n        since: new Date(),\n      }));\n    };\n\n    const onConnectionChange = () => {\n      setState((prevState) => ({\n        ...prevState,\n        ...getConnectionProperty(),\n      }));\n    };\n\n    window.addEventListener(\"online\", onOnline);\n    window.addEventListener(\"offline\", onOffline);\n\n    const connection = getConnection();\n    connection?.addEventListener(\"change\", onConnectionChange);\n\n    return () => {\n      window.removeEventListener(\"online\", onOnline);\n      window.removeEventListener(\"offline\", onOffline);\n      connection?.removeEventListener(\"change\", onConnectionChange);\n    };\n  }, []);\n\n  return state;\n}\n\nfunction App() {\n  const { online } = useNetwork();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {online ? (\n          <h1>\n            You are online <HiStatusOnline />\n          </h1>\n        ) : (\n          <h1>\n            You are offline <HiStatusOffline />\n          </h1>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}